# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: artifactbundle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: swiftty/swiftpm-artifactbundle-builder@main
      id: builder
      with:
        swift-version: "5.7"
    - name: check
      run: |
        tar -cvzf output.tar.gz ${{ steps.builder.outputs.path }}
    - uses: actions/upload-artifact@v3
      with:
        name: artifact-${{ runner.os }}.tar.gz
        path: output.tar.gz
        retention-days: 1

  bundle:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
    - uses: actions/download-artifact@v3
      with:
        path: output
    - name: check
      run: |
        for ar in `ls output/*.tar.gz`; do
          tar -xvzf $ar
          rm -r $(dirname $ar)
        done

        cat << EOS > info.json
{
    "schemaVersion": "1.0",
    "artifacts": {}
}
EOS

        ARTIFACTBUNDLE=$(basename $PWD).artifactbundle
        mkdir -p $ARTIFACTBUNDLE

        for triple in `ls output`; do
          for json in `ls output/$triple/*.json`; do
            ID=$(basename $json .json)
            if cat info.json | jq --exit-status '.artifacts."'$ID'"' ; then
              echo "$ID exists"
            else
              JSON=$(cat info.json | jq '.artifacts |= { "'$ID'": { "type": "executable", "version": "0.0.1", "variants": [] } }')
              echo $JSON > info.json
            fi

            JSON=$(cat info.json | jq --argjson var $(cat $json | jq -c .) '.artifacts."'$ID'".variants += [$var]')
            echo $JSON | jq . > info.json
          done

          mkdir -p $ARTIFACTBUNDLE/$triple
          mv output/$triple/bin $ARTIFACTBUNDLE/$triple
        done

        mv info.json $ARTIFACTBUNDLE
