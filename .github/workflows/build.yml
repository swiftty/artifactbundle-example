# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: artifactbundle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: swiftty/swiftpm-artifactbundle-builder@main
      id: builder
      with:
        swift-version: "5.7"

  bundle:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
    - uses: actions/download-artifact@v3
      with:
        path: output
    - name: Unarchive
      run: |
        for ar in `ls output/artifact-*/*.tar.gz`; do
          tar -xvzf $ar
          rm -r $(dirname $ar)
        done
    - name: check
      run: |
        ARTIFACTBUNDLE=$(basename $PWD).artifactbundle

        for version in `ls output`; do
          ARTIFACTBUNDLE_PATH=dist/$version/$ARTIFACTBUNDLE

          INFO_PATH=$ARTIFACTBUNDLE_PATH/info.json

          mkdir -p $ARTIFACTBUNDLE_PATH

          cat << EOS > $INFO_PATH
        {
            "schemaVersion": "1.0",
            "artifacts": {}
        }
        EOS

          for triple in `ls output/$version`; do
            for json in `ls output/$version/$triple/*.json`; do
              ID=$(basename $json .json)
              if cat $INFO_PATH | jq --exit-status '.artifacts."'$ID'"' 1> /dev/null ; then
                echo "$ID exists"
              else
                JSON=$(cat $INFO_PATH | jq '.artifacts |= { "'$ID'": { "type": "executable", "version": "0.0.1", "variants": [] } }')
                echo $JSON > $INFO_PATH
              fi

              JSON=$(cat $INFO_PATH | jq --argjson var $(cat $json | jq -c .) '.artifacts."'$ID'".variants += [$var]')
              echo $JSON | jq . > $INFO_PATH
            done

            mkdir -p $ARTIFACTBUNDLE_PATH/$triple
            mv output/$version/$triple/bin $ARTIFACTBUNDLE_PATH/$triple
          done

          zip -r $ARTIFACTBUNDLE.zip $ARTIFACTBUNDLE_PATH
          mv $ARTIFACTBUNDLE.zip dist/$version/
        done
    - uses: actions/upload-artifact@v3
      with:
        name: artifactbundle.zip
        path: 'dist/**/*.artifactbundle.zip'
        retention-days: 1
